{"version":3,"sources":["pages/Welcome.js","App.js","registerServiceWorker.js","index.js"],"names":["Welcome","firebase","initializeApp","apiKey","authDomain","App","state","isSignedIn","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","EmailAuthProvider","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","setState","className","exact","path","component","this","onClick","signOut","currentUser","displayName","alt","src","photoURL","firebaseAuth","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"wQAUeA,MAPf,WACI,OACI,8BACI,kD,yBCGZC,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,+B,IAqDCC,E,4MAjDbC,MAAM,CAAEC,YAAY,G,EACpBC,SAAW,CACTC,WAAY,QACZC,cAAe,CACbT,IAASU,KAAKC,mBAAmBC,YACjCZ,IAASU,KAAKG,qBAAqBD,YACnCZ,IAASU,KAAKI,kBAAkBF,aAElCG,UAAW,CACTC,cAAe,kBAAM,K,EAIzBC,kBAAoB,WAClBjB,IAASU,OAAOQ,oBAAmB,SAAAC,GACjC,EAAKC,SAAS,CAAEd,aAAgBa,Q,4CAIpC,WACE,OACE,sBAAKE,UAAU,MAAf,UACC,cAAC,IAAD,UACD,cAAC,EAAD,CAASC,OAAK,EAACC,KAAK,IAAIC,UAAWzB,MAElC0B,KAAKpB,MAAMC,WACZ,iCACA,6CACA,wBAAQoB,QAAS,kBAAI1B,IAASU,OAAOiB,WAArC,wBACA,sCAAS3B,IAASU,OAAOkB,YAAYC,eACrC,qBAAKC,IAAI,UAAUC,IAAK/B,IAASU,OAAOkB,YAAYI,cAKlD,cAAC,IAAD,CACAzB,SAAUkB,KAAKlB,SACf0B,aAAcjC,IAASU,gB,GAtCbwB,aCJZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfsC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDUX,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,GAAN,sBAEN5B,EAwCX,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEAzDAqB,CAAwBjC,GAHxBD,EAAgBC,OCxBxBkC,K","file":"static/js/main.f33037c3.chunk.js","sourcesContent":["// the landing page \nimport React from \"react\";\n\nfunction Welcome () {\n    return (\n        <div>\n            <h1> Hello World </h1>\n        </div>\n    )\n}\nexport default Welcome;\n\n//one sentence welcome tagline \n//Login/ sign Up button\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Welcome from \"./pages/Welcome\";\nimport firebase from \"firebase\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport { Component } from \"react\";\n\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyB2tdcU5QNdKXSdgZIoNuf6ejdNE5Dkfs8\",\n  authDomain: \"paw-s-date.firebaseapp.com\"\n})\n\nclass App extends Component {\n  state={ isSignedIn: false }\n  uiConfig = {\n    signInFlow: \"popup\",\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      signInSuccess: () => false\n    }\n  }\n\n  componentDidMount = () => {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({ isSignedIn : !! user })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\"> \n       <Router>\n      <Welcome exact path=\"/\" component={Welcome}/>\n    </Router>\n      {this.state.isSignedIn ? \n      <span>\n      <div>Signed In!</div>\n      <button onClick={()=>firebase.auth().signOut()}> Sign Out!</button>\n      <h3>Hey {firebase.auth().currentUser.displayName}</h3>\n      <img alt=\"profile\" src={firebase.auth().currentUser.photoURL}/>\n      </span>\n      \n      :\n      (\n        <StyledFirebaseAuth\n        uiConfig={this.uiConfig}\n        firebaseAuth={firebase.auth()}\n        />\n      )\n       }\n       \n      </div>\n     \n    );\n  }\n  \n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n\n"],"sourceRoot":""}